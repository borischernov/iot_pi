<% poll_interval_ms = (@params['poll_interval'] || 60).to_i * 1000 %>
function send_data(data)
    conn=net.createConnection(net.TCP, 0) 
    conn:on("receive", function(conn, payload) print(payload) end)
    conn:on("sent",function(conn)
        print("Closing connection")
        conn:close()
        <% if @params['use_dsleep'].to_i == 1 %>node.dsleep(<%= poll_interval_ms * 1000 %>)<% end %>
    end)
    conn:on("disconnection", function(conn)
        print("Got disconnection...")
        <% if @params['use_dsleep'].to_i == 1 %>node.dsleep(<%= poll_interval_ms * 1000 %>)<% end %>
    end)
    conn:on("connection", function() 
        print("Connected")
        conn:send("GET /api/set_data_multiple/" .. data .. " HTTP/1.1\r\nHost: <%= @params['host'] %>\r\nAccept: */*\r\n\r\n")
    end)
    conn:connect(<%= @params['port'] %>,"<%= @params['host'] %>") 
end

<% case @params['sensor_type'] 
   when 'ds18b20' %>
-----------------------------------------------------------------------------------------
function str_addr(addr)
    res = string.format("%02x", addr:byte(1)).."-"
    for i=7,2,-1 do res = res .. string.format("%02x", addr:byte(i)) end
    return res
end

function send_sensors_data()
    addrs = ds18b20.addrs()
    if (addrs ~= nil) then
      data = ""
      print("Total DS18B20 sensors: "..table.getn(addrs))
      for i,addr in ipairs(addrs) do
        temp = ds18b20.read(addr)
        straddr = str_addr(addr)
        print(string.format("%s: Temperature: %s degrees C", straddr, temp))
        if (temp ~= 85 and temp ~= -127) then 
        	data = data .. straddr .. "%7C" .. temp .. "%7C")
       	end
      end
      send_data(data)
    end
end
<% when 'am2320' %>
-----------------------------------------------------------------------------------------
function send_sensors_data()
    rh, t = am2320.read()
    print(string.format("RH: %s%%", rh / 10))
    print(string.format("Temperature: %s degrees C", t / 10))
    
    mac = wifi.sta.getmac()
    data =  mac .. '-rh%7C' .. (rh / 10) .. "%7C" .. mac .. '-t%7C' .. (t / 10)
        
    send_data(data)
end
<% when 'ads1015' %>
-----------------------------------------------------------------------------------------
function send_sensors_data()
    mac = wifi.sta.getmac()
    data = ''

    for i=0,3 do
    	ads1015.write_register(1, 0x0483 + 0x1000 * i)
    	tmr.delay(1000)
    	v = ads1015.read_register(0) * 4.096 / 0x8000
	    print(string.format("Channel %d, Voltage %.3f", i, v))
    	data = data .. string.format("%s-%d-v%%7C%.3f%%7C", mac, i, v)
    end

    send_data(data)
end
<% else %>
<% raise "Unknown sensor type: #{@params[:sensor_type]}" %>
<% end %>

print("Setting up WIFI...")
wifi.setmode(wifi.STATION)
wifi.sta.config("<%= @params['ssid'] %>","<%= @params['password'] %>")
wifi.sta.connect()

gpio0 = 3
gpio2 = 4

<% case @params['sensor_type'] 
   when 'ds18b20' %>
ds18b20 = require("ds18b20")
ds18b20.setup(gpio0)
<% when 'am2320' %>
am2320.init(gpio0, gpio2)
<% when 'ads1015' %>
ads1015 = require("ads1015")
ads1015.setup(gpio0, gpio2, 0x48)
<% end %> 

tmr.alarm(1, 500, tmr.ALARM_AUTO, function() 
    if wifi.sta.getip() == nil then 
        print("IP unavaiable, Waiting...") 
    else 
        print("Config done, IP is " .. wifi.sta.getip())
        tmr.interval(1, <%= poll_interval_ms %>) 
        send_sensors_data()        
    end
end)

